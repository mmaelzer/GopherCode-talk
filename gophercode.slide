GopherCode
A Brief Intro to Go
4 Nov 2015

Mike Maelzer


* Talk Summary
- What is Go
- Types
- Packages
- Tooling
- Examples


* What is Go?
Created at Google in 2009 by
- *Robert* *Griesmer*: V8 Engine, Java Hotspot VM, Strongtalk
- *Ken* *Thompson*: Unix, ed, B programming language, Plan 9, UTF-8
- *Rob* *Pike*: Plan 9, UTF-8, acme


* Language Features
- Compiled (quickly)
- Garbaged collected
- Statically typed
- Concurrent
- Tooling included

* Speed

.code webserver_test.txt


* Speed (part 2)

.code webserver_test2.txt


* Raison d'etre
The goals of the Go project were to eliminate the slowness and clumsiness of software development at Google, and thereby to make the process more productive and scalable. The language was designed by and for people who write—and read and debug and maintain—large software systems.

Go's purpose is therefore not to do research into programming language design; it is to improve the working environment for its designers and their coworkers.

.link https://talks.golang.org/2012/splash.article


* Hello World
.play helloworld.go


* Types (numeric)

*uint8*       unsigned 8-bit integer (0 to 255)
*uint16*      unsigned 16-bit integer (0 to 65535)
*uint32*      unsigned 32-bit integer (0 to 4294967295)
*uint64*      unsigned 64-bit integer (0 to 18446744073709551615)

*int8*        signed 8-bit integer (-128 to 127)
*int16*       signed 16-bit integer (-32768 to 32767)
*int32*       signed 32-bit integer (-2147483648 to 2147483647)
*int64*       signed 64-bit integer (-9223372036854775808 to 9223372036854775807)

*float32*     IEEE-754 32-bit floating-point number
*float64*     IEEE-754 64-bit floating-point number

*complex64*   complex number with float32 real and imaginary parts
*complex128*  complex number with float64 real and imaginary parts


* Types (bools & strings)

*bool*        boolean type as `true` or `false`

	isTrue := true

	var isFalse bool
	isFalse = false

*string*      read-only slice of bytes

.play strings.go /START OMIT/,/END OMIT/


* Types (collections)

*array*       a numbered sequence of elements of a single type

  array := [2]string{"Bob", "Linda"}
  // or
  var arr [2]string
  arr[0] = "Al"
  arr[1] = "Gloria"

*slice*       a descriptor for a contiguous segment of an underlying array

  slice := []string{"Tina", "Gene", "Louise"}

*map*         a group of elements with a value indexed by a unique key

  booleans := map[bool]string {
    true: "true",
    false: "false"
  }


* types (structs)

*struct*      a sequence of named elements (fields) each of which has a name and a type

define

  type Dog struct { 
    Name string
    Age  uint32
  }

instantiate

  scoops := Dog{"Scoops", 3}

  benji := Dog{
    Name: "Benji",
    Age: 12,
  }


* types (anonymous structs)

  me := struct {
    Name      string
    Eyes      int
    Breathing bool
  }, {
    "Mike",
    2,
    true,
  }

or

  folks := []struct {
    Name      string
    Literate  bool
  }, {
    {"Mike", false},
    {"Jacob", true},
    {"Fred", true},
  }

* types (functions)

*func*        a function type 

.play func.go /START OMIT/,/END OMIT/


* methods

methods can be defined for any named type (except a pointer or an interface)

.play methods.go /START OMIT/,/END OMIT/


* types (interfaces)

*interface*   specifies a set of methods

.play interfaces.go /START OMIT/,/END OMIT/


* types (channels)

*chan*        a channel type used for communication

.play channels.go /START OMIT/,/END OMIT/


* types (misc)

*byte*        alias for uint8
*rune*        alias for int32

*error*       a type with the following interface

  type error interface {
    Error() string
  }

Example of a custom error

  type MyError struct {
    msg string
    Code int
  }

  func (e *MyError) Error() string {
    return e.msg
  }


* Fun with types
.play types.go


* Packages
.code sums.go


* Packages continued
.play hellosums.go


* GOPATH Environment Variable
.code gopath.txt


* Tooling
Go comes with an extensive set of tooling and opinions to make getting started really easy

- *go* *build* - compile a go program
- *go* *run* - compile and run a go program
- *go* *test* - runs tests against files named `*_test.go` - can generate coverage reports by running with `-cover`

* Tooling (continued)

- *go* *get* - fetch third party packages and install them to bin/ and/or pkg/
- *godoc* - generate documentation for your code using comments and method signatures
- *go* *tool* *cover* - parses coverage profiles from running `go` `test` `-coverprofile=cover.out`
- *gofmt* - automatically formats go code to canonical go format (think: white space, curly braces, line breaks)
- *golint* - prints out style mistakes (think: variable naming, comments)
- *present* - a tool to give presentations, currently being used for this talk


* Let's build a web server
.play webserver.go /START OMIT/,/END OMIT/


* Let's build a crawler
.play crawler1.go /START OMIT/,/END OMIT/


* Let's make it better
.play crawler2.go /START OMIT/,/END OMIT/


* Let's use channels
.play crawler3.go /START OMIT/,/END OMIT/


* This presentation along with sample code can be found at
.link https://github.com/mmaelzer/GopherCode-talk
